import json

original = {
            'A': [[0, 0, 40, 0], [0, 0, 0, 70], [10, 10, 30, 10], [10, 10, 10, 30], [10, 30, 30, 30], [30, 10, 30, 30], [40, 0, 40, 70], [0, 70, 10, 70], [10, 40, 10, 70], [10, 40, 30, 40], [30, 40, 30, 70], [30, 70, 40, 70]],
            'B': [[0, 0, 0, 70], [0, 0, 40, 0], [0, 70, 40, 70], [40, 0, 40, 30], [40, 40, 40, 70], [40, 30, 35, 35], [40, 40, 35, 35], [10, 10, 10, 30], [10, 10, 30, 10], [30, 30, 10, 30], [30, 30, 30, 10], [10, 40, 30, 40], [10, 40, 10, 60], [30, 60, 30, 40], [30, 60, 10, 60]],
            'C': [[0, 0, 0, 70], [0, 0, 40, 0], [0, 70, 40, 70], [40, 0, 40, 20], [40, 20, 30, 20], [30, 20, 30, 10], [10, 10, 30, 10], [10, 10, 10, 60], [10, 60, 30, 60], [30, 60, 30, 50], [30, 50, 40, 50], [40, 70, 40, 50]],
            'D': [[0, 0, 30, 0], [0, 0, 0, 70], [0, 70, 30, 70], [30, 0, 40, 10], [30, 70, 40, 60], [40, 10, 40, 60], [10, 10, 25, 10], [10, 10, 10, 60], [10, 60, 25, 60], [25, 60, 30, 55], [25, 10, 30, 15], [30, 15, 30, 55]],
            'E': [[0, 0, 40, 0], [0, 0, 0, 70], [0, 70, 40, 70], [40, 0, 40, 10], [40, 10, 10, 10], [10, 10, 10, 30], [10, 30, 30, 30], [30, 30, 30, 40], [30, 40, 10, 40], [10, 40, 10, 60], [10, 60, 40, 60], [40, 60, 40, 70]],
            'F': [[0, 0, 40, 0], [0, 0, 0, 70], [0, 70, 10, 70], [40, 0, 40, 10], [40, 10, 10, 10], [10, 10, 10, 30], [10, 30, 30, 30], [30, 30, 30, 40], [30, 40, 10, 40], [10, 40, 10, 70]],
            'G': [[0, 0, 40, 0], [40, 0, 40, 20], [40, 20, 30, 20], [30, 20, 30, 10], [30, 10, 10, 10], [10, 10, 10, 60], [10, 60, 30, 60], [30, 60, 30, 40], [30, 40, 20, 40], [20, 40, 20, 30], [20, 30, 40, 30], [40, 30, 40, 70], [40, 70, 0, 70], [0, 70, 0, 0]],
            'H': [[0, 0, 10, 0], [10, 0, 10, 30], [10, 30, 30, 30], [30, 30, 30, 0], [30, 0, 40, 0], [40, 0, 40, 70], [40, 70, 30, 70], [30, 70, 30, 40], [30, 40, 10, 40], [10, 40, 10, 70], [10, 70, 0, 70], [0, 70, 0, 0]],
            'I': [[0, 0, 30, 0], [30, 0, 30, 10], [30, 10, 20, 10], [20, 10, 20, 60], [20, 60, 30, 60], [30, 60, 30, 70], [30, 70, 0, 70], [0, 70, 0, 60], [0, 60, 10, 60], [10, 60, 10, 10], [10, 10, 0, 10], [0, 10, 0, 0]],
            'J': [[0, 50, 10, 50], [10, 50, 10, 60], [10, 60, 30, 60], [30, 60, 30, 0], [30, 0, 40, 0], [40, 0, 40, 70], [40, 70, 0, 70], [0, 70, 0, 50]],
            'K': [[0, 0, 10, 0], [10, 0, 10, 30], [10, 30, 25, 30], [25, 30, 30, 25], [30, 25, 30, 0], [30, 0, 40, 0], [40, 0, 40, 30], [40, 30, 35, 35], [35, 35, 40, 40], [40, 40, 40, 70], [40, 70, 30, 70], [30, 70, 30, 45], [30, 45, 25, 40], [25, 40, 10, 40], [10, 40, 10, 70], [10, 70, 0, 70], [0, 70, 0, 0]],
            'L': [[0, 0, 10, 0], [10, 0, 10, 60], [10, 60, 40, 60], [40, 60, 40, 70], [40, 70, 0, 70], [0, 70, 0, 0]],
            "M": [ [0, 0, 15, 0], [15, 0, 35, 50], [35, 50, 55, 0], [55, 0, 70, 0], [70, 0, 70, 70], [70, 70, 60, 70], [60, 70, 60, 20], [60, 20, 40, 70], [40, 70, 30, 70], [30, 70, 10, 20], [10, 20, 10, 70], [10, 70, 0, 70], [0, 70, 0, 0]],
            "N": [[0, 0, 15, 0], [15, 0, 40, 50], [40, 50, 40, 0], [40, 0, 50, 0], [50, 0, 50, 70], [50, 70, 35, 70], [35, 70, 10, 20], [10, 20, 10, 70], [10, 70, 0, 70], [0, 70, 0, 0]],
            "O": [[0, 0, 40, 0], [40, 0, 40, 70], [40, 70, 0, 70], [0, 70, 0, 0], [10, 10, 30, 10], [30, 10, 30, 60], [30, 60, 10, 60], [10, 60, 10, 10]],
            "P": [[0, 0, 40, 0], [40, 0, 40, 40], [40, 40, 10, 40], [10, 40, 10, 70], [10, 70, 0, 70], [0, 70, 0, 0], [10, 10, 30, 10], [30, 10, 30, 30], [30, 30, 10, 30], [10, 30, 10, 10]],

            }

segments = []
step = 5

for letter in original:
    new_segments = []  # Store updated segments per letter
    for line in original[letter]:
        a, b, c, d = line
        if a == c:  # Vertical line
            if b > d:  # Ensure step direction for downward lines
                b, d = d, b
            for start in range(b, d, step):
                new_segments.append([a, start, c, min(start + step, d)])
        elif b == d:  # Horizontal line
            if a > c:  # Ensure step direction for leftward lines
                a, c = c, a
            for start in range(a, c, step):
                new_segments.append([start, b, min(start + step, c), d])
        else:  # Non-axis-aligned lines (unchanged)
            new_segments.append([a, b, c, d])
    original[letter] = new_segments  # Update original with segmented lines

# Save as a JavaScript file
with open("sewing/original.js", "w") as f:
    f.write(f"const original = {json.dumps(original, indent=2)};\n")
    f.write("export default original;")  # Make it importable
